---
title: "Mini-Project2"
author: "Tenzin Gyaltsen, Shen Rothermel"
format:
  pdf: default
editor_options: 
  chunk_output_type: console
---

## Introduction

In this project, we explored soccer statistics from multiple professional football leagues using data from FBref (https://fbref.com/en/comps/22/Major-League-Soccer-Stats), a trusted site for advanced football analytics. While we initially focused on Major League Soccer (MLS), we extended our analysis to include other major international competitions such as the Premier League, La Liga, Bundesliga, and Serie A.

Our goal was to collect and organize standardized squad-level statistics across leagues to support comparative analysis. Specifically, we targeted the "Squad Standard Stats" tables on each competition’s main stats page. These tables contain information on team performance metrics such as matches played, goals, assists, average age, possession %, and more.

## Motivation

We chose this dataset primarily out of personal interest: one of us enjoys following global football news, while the other is an avid FC25 player. Beyond our curiosity, we recognized that this data offers a rich opportunity for cross-league comparisons.

By scraping the same type of statistics from each league, we aimed to answer questions such as:

-   Do older squads tend to score more or less?
-   Is there a relationship between average age and possession percentage?
-   How does team performance (e.g., goals, assists) vary across leagues?

These questions open the door for future data visualizations (like scatterplots or heatmaps) and statistical modeling (e.g., regression of goals on age or possession).

To acquire the data, we used a custom scraping function along with an iteration technique (pmap) to systematically collect comparable squad stats from each league's respective webpage. This ensures consistency while handling slight variations in webpage structure — such as differing table positions.

## Scraping the “Squad Standard Stats” table:

To begin, we manually scrape the Major League Soccer (MLS) stats page using rvest. This allows us to locate and inspect the structure of all tables on the page, which helps identify the correct table containing squad-level statistics.

Once we confirm the correct table is loaded (in this case, table 5), we clean it by promoting the first row to column headers, standardizing names, and parsing numeric columns. This results in a tidy dataset ready for analysis.

```{r}
library(dplyr)
library(ggthemes)
library(janitor)
library(purrr)
library(readr)
library(rvest)
library(stringr)
library(tidyverse)

# Check permissions for the specific stats page
robotstxt::paths_allowed("https://fbref.com/en/comps/22/Major-League-Soccer-Stats")

# Step 1: Read the page with rvest
MLS_table <- read_html("https://fbref.com/en/comps/22/Major-League-Soccer-Stats")

# Step 2: Extract tables from the page
Squad <- html_nodes(MLS_table, "table")
html_table(Squad, header = TRUE, fill = TRUE)  # find right table

# Step 3: Extract the correct table (the fifth table on the page)
Squad2 <- html_table(Squad, header = TRUE, fill = TRUE)[[5]]
Squad2

# Step 4: Keep only relevant columns and clean the data
Squad2_cleaned <- Squad2 |>
  row_to_names(row_number = 1) |>   # promotes row 1 to column names
  clean_names() |>                  # make the column names snake_case
  select(1:20) |>                   # keep only the first 16 columns
  filter(squad != "Squad") |>       # remove header repeats if any
  mutate(across(2:20, parse_number))# apply parse_number to cols 2–16
Squad2_cleaned
```

## Creating a Custom Web Scraping Function:

Next, we generalize this scraping process by writing a custom function called scrape_fbref_table(). This function takes in a URL and table number and performs all the cleaning steps automatically. We use it to easily scrape multiple pages later on.

```{r}
# Custom Function
scrape_fbref_table <- function(url, table_number = 5, n_cols = 20) {
  page <- read_html(url)
  tables <- html_nodes(page, "table")
  raw_table <- html_table(tables, fill = TRUE)[[table_number]]
  
  cleaned_table <- raw_table |>
    row_to_names(row_number = 1) |>
    clean_names() |>
    select(1:n_cols) |>
    filter(squad != "Squad") |>
    mutate(across(all_of(2:n_cols), parse_number))
  
  return(cleaned_table)
}

Squad2_cleaned <- scrape_fbref_table("https://fbref.com/en/comps/22/Major-League-Soccer-Stats")
Squad2_cleaned
```

## Iterating Over Multiple Competitions

We used purrr::pmap() to iterate over multiple variables — specifically, league URLs, the table numbers containing the "Squad Standard Stats" table for each competition, and the league names. This allowed us to apply our custom scraping function across multiple soccer leagues, each with its own unique webpage and table structure. This approach demonstrates how iteration over multiple inputs can automate the data collection process across structured but inconsistent sources.

```{r}
# Step 1: Define league names, URLs, and their specific table numbers
leagues <- tibble::tibble(
  league = c("MLS", "Premier_League", "La_Liga", "Bundesliga", "Serie_A"),
  url = c(
    "https://fbref.com/en/comps/22/Major-League-Soccer-Stats",
    "https://fbref.com/en/comps/9/Premier-League-Stats",
    "https://fbref.com/en/comps/12/La-Liga-Stats",
    "https://fbref.com/en/comps/20/Bundesliga-Stats",
    "https://fbref.com/en/comps/11/Serie-A-Stats"
  ),
  table_number = c(5, 3, 3, 3, 3)  # Specify table index for each league
)

# Step 2: Scrape each league using map3 to pass 3 arguments
squad_tables <- pmap(
  list(leagues$url, leagues$table_number, leagues$league),
  function(url, table_num, league_name) {
    scrape_fbref_table(url, table_number = table_num) |> 
      mutate(league = league_name)  # Optionally tag league in each table
  }
)

# Step 3: Name each list entry by league
names(squad_tables) <- leagues$league

# Now each league table is separate and named:
squad_tables$MLS
squad_tables$Premier_League
squad_tables$La_Liga
squad_tables$Bundesliga
squad_tables$Serie_A

# Bind each into a single tibble
league_names <- c("MLS East", "MLS WEST", "Premier League", "La Liga", "Bundesliga", "Serie A")

squads <- bind_rows(squad_tables) |> select(21, 1:20)

squads
```

# Scraping and Cleaning Soccer League Standings from FBref

To complement the squad-level performance data, we also scraped league standings tables from FBref to provide contextual insight into how teams performed in their respective competitions. We created a custom function, scrape_fbref_standings(), which extracts a specified table from a given webpage, cleans the column names, and retains only the first 15 columns for consistency.

We applied this function to gather standings from six major competitions:

- The Eastern and Western Conferences of Major League Soccer (MLS)
- The top-level leagues in England (Premier League), Spain (La Liga), Germany (Bundesliga), and Italy (Serie A)

Each table was stored in a named list object, standings_tables, which allows for easy access and comparison across leagues. This standardized pipeline streamlines the collection of structured data from multiple sources and ensures that the resulting tables are tidy and analysis-ready. These standings data can be used in conjunction with squad-level statistics to explore broader questions about performance efficiency, league competitiveness, and team success metrics.

```{r}
# Step 0: Make sure our function is loaded
scrape_fbref_standings <- function(url, table_number = 1, n_cols = 15) {
  page <- read_html(url)
  tables <- html_nodes(page, "table")
  raw_table <- html_table(tables, fill = TRUE)[[table_number]]
  
  cleaned_table <- raw_table |>
    clean_names() |>
    select(all_of(1:n_cols))  
  
  return(cleaned_table)
}

# Step 1: Scrape each table of interest

# MLS: Eastern and Western Conferences
mls_url <- "https://fbref.com/en/comps/22/Major-League-Soccer-Stats"
mls_east <- scrape_fbref_standings(mls_url, table_number = 1)
mls_west <- scrape_fbref_standings(mls_url, table_number = 3)

# Premier League
premier_league_url <- "https://fbref.com/en/comps/9/Premier-League-Stats"
premier_league <- scrape_fbref_standings(premier_league_url, table_number = 1)

# La Liga
la_liga_url <- "https://fbref.com/en/comps/12/La-Liga-Stats"
la_liga <- scrape_fbref_standings(la_liga_url, table_number = 1)

# Bundesliga
bundesliga_url <- "https://fbref.com/en/comps/20/Bundesliga-Stats"
bundesliga <- scrape_fbref_standings(bundesliga_url, table_number = 1)

# Serie A
serie_a_url <- "https://fbref.com/en/comps/11/Serie-A-Stats"
serie_a <- scrape_fbref_standings(serie_a_url, table_number = 1)

# Step 2: Store in a list
standings_tables <- list(
  MLS_East = mls_east,
  MLS_West = mls_west,
  Premier_League = premier_league,
  La_Liga = la_liga,
  Bundesliga = bundesliga,
  Serie_A = serie_a
)

# Resulting tables 
standings_tables$MLS_East
standings_tables$MLS_West
standings_tables$Premier_League
standings_tables$La_Liga
standings_tables$Bundesliga
standings_tables$Serie_A

# Combine leagues into a single tibble
standings <-
	bind_rows(standings_tables, .id = "league")

standings
```

```{r}
squads_augmented <- squads |>
	mutate(league = ifelse(league == "La_Liga", "La Liga",
									ifelse(league == "Premier_League", "Premier League",
									ifelse(league == "Serie_A", "Serie A",
																							league))),
				 goals_per_game = gls / mp,
				 assist_rate = ast / gls,
				 discipline_score = crd_y + 2 * crd_r,
				 min_per_player = min / number_pl)

squads_augmented
```

```{r}
squads_augmented |> 
	ggplot() +
	geom_point(aes(x = age, y = gls, color = league, shape = league), size = 3) +
	labs(title = "Team Average Age vs. Goals by League",
			 x = "Average Age",
			 y = "Goals",
			 color = "League",
			 shape = "League") +
	scale_color_colorblind()
```

```{r}
squads_augmented |> 
	ggplot() +
	geom_point(aes(x = poss, y = gls, color = league), size = 2, show.legend = F) +
	facet_wrap(~league) +
	labs(title = "Possession vs. Goals by League",
			 x = "Possession",
			 y = "Goals") +
	scale_color_colorblind()
```

```{r}
squads_augmented |>
	group_by(league) |> 
	slice_max(goals_per_game, n = 5) |> 
	ggplot() +
	geom_col(aes(x = fct_reorder(squad, goals_per_game),
							 y = goals_per_game,
							 fill = league)) +
	labs(title = "Top 5 Teams by Goals per Game by League",
			 x = "Squad",
			 y = "Goals per Game",
			 fill = "League") +
	coord_flip() +
	scale_fill_colorblind()
```